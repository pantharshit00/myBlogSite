-- MySQL dump 10.13  Distrib 5.7.18, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.18-0ubuntu0.16.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blogs`
--

DROP TABLE IF EXISTS `blogs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blogs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` text NOT NULL,
  `preview` text NOT NULL,
  `content` text NOT NULL,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blogs`
--

LOCK TABLES `blogs` WRITE;
/*!40000 ALTER TABLE `blogs` DISABLE KEYS */;
INSERT INTO `blogs` VALUES (1,'Using React Router version 4','[![React Router v4](https://i.ytimg.com/vi/ZurrLqWyRms/maxresdefault.jpg \"React Router v4\")](/blog/1)\r\nA few days ago when I started a new react project which includes routing with react router. After setting up the react router, my code simply start to broke. I debugged my code many times but still nothing worked.','![React Router](https://i.ytimg.com/vi/ZurrLqWyRms/maxresdefault.jpg \"React Router\")\r\nA few days ago when I started a new react project which includes routing with react router. After setting up the react router, my code simply start to broke. I debugged my code many times but still nothing worked. At last I realised that [React Router](http://reacttraining.com/react-router) version 4 has been released to main stream. A quite a few things have changes. So lets dive right into it. Here is an example:-\r\n\r\n<hr>\r\n\r\n<script src=\"https://gist.github.com/pantharshit00/5ce7d967b843ee7f0c49bd0294600d51.js\"></script>\r\n\r\n[See live example on codepen](https://codepen.io/pantharshit00/pen/OpZLoa)\r\n\r\n<hr>\r\n\r\n### Example Expained!\r\n\r\nThe `<Router>` component now has been removed in react router version 4 which used to receive history as prop, which is either `HashHistory` and `BrowserHistory`. This now has been replaced with two separate component for hash and browser history. For `browserHistory` now `<BrowserRouter>` component is being used. Similarly there is `<HashRouter>` for `hashHistory`. You may rename them as Router if you find it more readable as I have done in the example using the ES6 `as` keyword.\r\n\r\nThe top level component of your app in this case the `<App>` should be wrapped within this new `<Router>` component so that the `<Route>`component may use the router. In react router v3 or below we use to render `this.props.children` inside the component of the root route. Now we render the `<Route>` component in the component we want to spit out the routes. You may notice in the code above that there is an `exact` prop in the home route component. This is so now that if exact is not included it will behave as a **\'catch all route\'** and any route will be rendered by that route. I think sub routes for url now have been deprived I am not sure though. I\'ll test it an update this article. There are two routes in this example. They are only spitting out two stateless components. Note components should also be passed in `{}` not as a string, it will cause an error.\r\n\r\n<hr>\r\n\r\n### Notable changes in React Router v4\r\n1. Separate Package for Web and React Native(_Android and iOS_)\r\n2. Easy server side rendering with <StaticRouter> component\r\n3. Its a complete rewrite and it is more declarative\r\n4. Easy redirection with `<Redirect>` component\r\n5. Redux integration baked in to the package.\r\n\r\n<hr>\r\n\r\n### See official site of [React Router](https://reacttraining.com/react-router) for more details \r\n\r\n','2017-03-25 16:33:02','2017-04-19 05:58:16'),(2,'Using Passport.js for authentication in SQL based DBMS','[![Passport+Sequelize+SQL](https://hptechblogs.com/static/uploads/a73a72e2e2fc71f8fd7d766e251fc91a.png \"Passport+Sequelize+SQL\")](https://hptechblogs.com/blog/2)\r\nThe official documentation of [PassportJS](http://passportjs.org) is quite confusing for SQL based database system as its documentation contains the model function of mongoDB\'s ORM mongoose. Once it took me a while to implement it in postgreSQL project using the only bare [pg](http://npmjs.org/package/pg) package.','![Sequelize+Passport+SQL](https://hptechblogs.com/static/uploads/a73a72e2e2fc71f8fd7d766e251fc91a.png \"Sequelize+Passport+SQL\")\r\n<br>\r\nThe official documentation of [PassportJS](http://passportjs.org) is quite confusing for SQL based database system as its documentation contains the model function of mongoDB\'s ORM mongoose. Once it took me a while to implement it in a postgreSQL project using only node [pg](http://npmjs.org/package/pg) package. Then I came across with a awesome npm package called [Sequelize](http://sequelizejs.com) which is a Object Relation Mapper for SQL based databases like MySQL ,Postgres, SQLite, msSQL etc. It provide functions for SQL queries which is quite handy. I recommend to watch this [playlist](http://bit.ly/2ox7hId) to learn more about sequelize.\r\n\r\n<hr>\r\n\r\n### Lets code a auth system with passport using postgreSQL\r\n\r\n#### Prerequisites \r\n\r\n1.  You have to be familiar with passport and its local strategy.\r\n2.  Obviously you need to know node and some basics of db handling.\r\n\r\n<hr>\r\n\r\n#### Our user model  \r\n\r\n<script src=\"https://gist.github.com/pantharshit00/c7f977a50f07e930fb9652340349fb45.js\"></script>\r\n\r\nIn this example we are first bringing in `sequelize` using node `require`. Then we are defining the `connection` variable and setting it to the `Sequelize constructor`. The constructor takes 4 parameters first one is `database name`, second one is `username`, third one is `password` and last one is an object of `options`. In options we had defined the `dialect` to be postgres and `host` which is the address where the server of database is located. Then we are defining the `User` model which is equivalent to table in the database. We are using the `define` function for it which takes `name` and a object of `columns` as parameters. Each member of the object is a column in the table of DB. We can define column type by using sequelize. It also provide all options like `primary key`, `auto increment` etc. Then after we are connecting and syncing with the database. It will create the table if it doesn\'t exists in the database. At last we are exporting the `User model` for our use in the application. \r\n\r\n<hr>\r\n\r\n#### Our express server\r\n\r\n<script src=\"https://gist.github.com/pantharshit00/f9b5c41844bfbfe7df3d1bdb25d1e004.js\"></script>  \r\n\r\nIn this example we are first just importing some `dependencies` and setting up some `middlewares`. That stuff should be familiar to you. We are using `express-session` and `body-parser` middlewares. Come to the part where we are setting up our passport strategy. We are calling `passport.use()` which takes a passport strategy object. In this case `localStrategy`. `LocalStrategy` take a function with all the fields required and a `callback` function done. Then we are using the `sequelize model` function `findOne()` which takes an object of options . Here in options we are specifying `where` email = provided email. SQL query it makes is `SELECT * FROM <tablename> WHERE email= <provided email> LIMIT 1;` It returns a `promise` with the data retrieved. Then we are checking for the user if it is null. If null so we are sending no user and no error in the callback. Then we are checking the password. You should use hashed password checking logic here for security. Some of password hashing libraries are `bcrypt, crypto etc`. If password do not match we will return no user. At last if all goes right we are return user with no error in the callback. Then there is standered passport `serialize and deserialize function`. But in `deserialize` we are using sequelize `findOne()` function as we have done above. Then there is a `post`request handler of express using passport middleware for authentication. Then we have a middleware function for `auth guard`. This function take `request, response and call next middleware` as parameters. In this we are checking if request contains the user then we are going to call next middleware else we are responding with `forbidden status`(__403__) with a unauthorised message. Then we have a protected route using this middleware. Then we have a logout route calling `request.logout()` when executed to log the user out and then send a success message. At last we are starting the app the to listen on `port` 3000._**Tip:-** Use [Postman](http://bit.ly/1HCOCwF) to test the apis._\r\n\r\n<hr>\r\n\r\n#### Package.json file if anyone needs it\r\n\r\n<script src=\"https://gist.github.com/pantharshit00/bbacc39b6bc25c3755707b47e195a1ba.js\"></script>\r\n\r\n<hr>\r\n\r\n#### I recommend to watch this [playlist](http://bit.ly/2ogl7zx) if you don\'t know how to use passport.','2017-03-29 03:42:38','2017-04-13 12:42:41'),(4,'Server Side Rendering in React and React Router(v4)','[![Server Side Render](https://hptechblogs.com/static/uploads/55184fcdcad0f7567ddbd14cdc891faf.jpg \"\")](https://hptechblogs.com/blog/4)\r\nServer side rendering in react and react router is a thing that greatly helps in Search Engine Optimization(SEO) and improving the overall speed of the website. In this article I am going to show you how you can perform server side rendering in react router v4 very easily. We are also going to use the react router. As of server I am going to use Express js framework of node as in this example but you may use anything you like. So lets start.','[![Server Side Render](https://hptechblogs.com/static/uploads/55184fcdcad0f7567ddbd14cdc891faf.jpg \"\")](https://hptechblogs.com/blog/4)\r\n\r\nServer side rendering in react and react router is a thing that greatly helps in Search Engine Optimization(SEO) and improving the overall speed of the website. In this article I am going to show you how you can perform server side rendering in react router v4 very easily. We are also going to use the react router. As of server I am going to use Express js framework of node as in this example but you may use anything you like. So lets start.\r\n\r\n<hr>\r\n\r\n### Code\r\n\r\n<script src=\"https://gist.github.com/pantharshit00/a4d971d08a092990a9a2f8d9f2c88f0f.js\"></script>\r\n\r\n<hr>\r\n\r\n### Result\r\n\r\n![result_render](https://hptechblogs.com/static/uploads/288fd8aa8ab0cd44a45d5a89557862d8.jpg \"result_render\")\r\n\r\nNotice the data-react attributes. That is enough to prove that component was rendered in the server.\r\n\r\n<hr>\r\n\r\n### Explanation\r\n\r\nThe react component that I used is the same that is in [using react router v4](http://hptechblogs.com/blog/1) blog. You may see that blog if wanna know how I made it. But it has a slight change. I have a if statement before `ReactDOM.render()` function. It is so as to stop it to execute in the server as there is no DOM in the the server. To check the DOM we check if the window exists. Also I have wrapped the `BrowserRouter` component down in the render as it also needs a DOM.\r\n\r\nThe main story is in the server. It is a simple express server. First I have imported all the dependencies and our component. Notice I have used ES6. It is so as we have to transpile it using babel as we have used JSX. I recommed `babel-node` or `babel-register` for it. I have linked to repository of this project down in which I have done so. Then we have a function returning simple html using ES6 template literals. Then we defined a catch all route `/*` as to render all the routes using `react-router`. Than we have a context variable which to to be passed to `StaticRouter`. `StaticRouter` is a component introduced in react-router v4 which requires no DOM. It need the location which we are passing using `request.url`.The context is used to deal with any redirects . As we don\'t have any redirects I have skipped that portion. Then we are using `renderToString` function of react-dom server to render our component to a string. In this we are passing our component wrapped in `StaticRouter`. Then we are passing this to our templating function with our component rendered into string. Then we are responding with this data. Lastly we are starting our server at port 3000.\r\n\r\n<hr>\r\n\r\n### [Git Repo](https://github.com/pantharshit00/serversiderender) for this Project if someone wants to test this.\r\n','2017-04-13 08:18:00','2017-04-15 04:02:36'),(5,'Awesome scrolling animation with Scroll Reveal','[![Scroll_reveal](https://hptechblogs.com/static/uploads/78f5f02da3f390a0470df343b5341d1a.jpg \"Scroll Reveal\")](https://hptechblogs.com/blog/5)\r\nYou must have seen the amazing scrolling effect in many big production websites. You also have thought if you might implement that same effect in your own website. It is very damn easy then you expect. The library [Scroll Reveal](http://scrollrevealjs.org) makes it very easy. Lets see an example.','[![Scroll_reveal](https://hptechblogs.com/static/uploads/78f5f02da3f390a0470df343b5341d1a.jpg \"Scroll Reveal\")](https://hptechblogs.com/blog/5)\r\nYou must have seen the amazing scrolling effect in many big production websites. You also have thought if you might implement that same effect in your own website. It is very damn easy then you expect. The library [Scroll Reveal](http://scrollrevealjs.org) makes it very easy. Lets see an example.\r\n\r\n## Example in codepen.io (See the JS tab)\r\nScroll down to see more of it.\r\n\r\n<hr>\r\n\r\n<p data-height=\"345\" data-theme-id=\"dark\" data-slug-hash=\"MmaEoY\" data-default-tab=\"html,result\" data-user=\"pantharshit00\" data-embed-version=\"2\" data-pen-title=\"Scroll Reveal\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/pantharshit00/pen/MmaEoY/\">Scroll Reveal</a> by Harshit Pant (<a href=\"http://codepen.io/pantharshit00\">@pantharshit00</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\r\n<script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\r\n\r\n<hr>\r\n\r\n## Example Explained\r\nMake sure you include the scroll reveal library by including \r\n\r\n```\r\n<script src=\"https://unpkg.com/scrollreveal/dist/scrollreveal.min.js\"></script>\r\n```\r\n\r\nI have included it in codepen\'s setting so you might not see it. I\'ll concentrate on the javascript more so open the JS tab in codepen. Firstly we are instantiating scroll reveal as `window.sr` as to make its scope all over the window or document. We are passing an object of options to override the default settings. I am just passing `{reset:true}` to show the effect more than once. You may see more options to play with in the git repo of scroll reveal linked down. Then to animate our first section we are calling `sr.reveal()` method. We have to pass the id using `#` or class using `.` kind a like CSS so that scroll reveal may select the element using `document.querySelector()` .As a second argument we may pass some options like `origin`,`distance` and `duration`. Other things in the file are the same just written for other sections. This only takes for this great scroll animation to take place. It really that simple.\r\n\r\n<hr>\r\n\r\n## [Git repo](https://github.com/jlmakes/scrollreveal) of scroll reveal','2017-04-18 10:40:45','2017-04-18 13:32:52'),(6,'Deploy a node js application to Amazon Web Services (AWS)','[![AWS](https://hptechblogs.com/static/uploads/608d346a974c668fda04a5a9ce321af7.png \"AWS\")](https://hptechblogs.com/blog/6)\r\nIn this blog post I am going to show how you can deploy a simple node js web application to amazon web services so that it can be live over the internet. I will try my best to use the best practices in this tutorial\r\n','<div class=\"embed-responsive embed-responsive-16by9\">\r\n<iframe class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/neXSroCrNd8\" frameborder=\"0\" allowfullscreen></iframe>\r\n</div>\r\n\r\nIn this blog post I am going to show how you can deploy a simple node js web application to amazon web services so that it can be live over the internet. I will try my best to use the best practices in this tutorial\r\n\r\n<hr>\r\n\r\n## Prerequisites \r\n1. Install [Git Bash](http://git-scm.com) if you in windows(Terminal is enough in Mac or Linux)\r\n2. Sign Up for AWS\r\n\r\n<hr>\r\n\r\n## Launch an EC2 instance\r\n1. Go to [AWS](https://aws.amazon.com) and sign into your console\r\n2. Under Services tab up in the navbar choose EC2 to go into the EC2 console\r\n3. Go to the instance tab from the sidebar\r\n4. Click on Launch instance from the instance menu\r\n5. Under OS select Ubuntu 16.04 or which ever OS you like\r\n6. Select the instance size\r\n7. Leave networking and other stuff to default\r\n8. Leave the storage to default too in the next tab\r\n9. Configure the security group. Add all the ports from the menu you want (eg PORT 80 for http)\r\n10. Click Review and Launch\r\n11. From the pop up, choose create a new key pair and download the key pair.\r\n12. Click on launch instance\r\n\r\n<hr>\r\n\r\n## SSH into the server\r\nAfter in the EC2 console the status of the instance is running, go ahead and click on the instance and copy the public IP from the menu opened and follow the following steps.\r\n1. Open git bash if you are in windows or terminal if you are in mac or Linux.\r\n2. Navigate to the folder using `cd` where you downloaded the key pair.\r\n3. SSH into the server by using the command `ssh -i \"node.pem\" ubuntu@54.53.223.175` Change the filename and IP address to yours.\r\n4. You should be presented with the welcome message.\r\n\r\n<hr>\r\n\r\n## Setting up Server\r\n1. First update the package manager by `sudo apt-get update`\r\n2. Then upgrade any outdated packages by `sudo apt-get upgrade`\r\n3. Now we have to install node. `curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash - && sudo apt-get install -y nodejs`\r\n4. Verify the installation by `node -v`\r\n5. Transfer your node application to the server. I recommend github repository for it. You may use rsync as well.\r\n6. Install your npm dependencies by `npm install`\r\n7. Start you application `node index.js`.Replace index.js with your app\'s starting script\r\n9. In your browser go to `http://YOURSERVERIP:PORT`. You should see your app up and running.\r\n\r\n<hr>\r\n\r\n## Run our app using forever\r\nIf you close your terminal now your app will stop working. We want to run it in the background. We will use the `forever` package.\r\n1. Install forever by `sudo npm install -g forever`\r\n2. Start your app using `forever start index.js` Replace index.js with your app\'s starting script.\r\n3. In your browser go to `http://YOURSERVERIP:PORT`. You should see your app up and running.\r\n4. Verify it in forever to by `forever list`\r\n\r\n<hr>\r\n\r\n## Redirect port 80 to 8080\r\nAs by default browser communicate to port 80 of the server in http mode and port 443 in https. So we need to redirect port 8080 to port 80. Use this command for it.\r\n\r\n`sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080`\r\n','2017-04-19 08:48:21','2017-04-19 10:20:09'),(7,'Password hashing in node.js using the pbkdf2 in crypto library','[![node_crypto](https://hptechblogs.com/static/uploads/cda08c18977e9fc16b2c6055835891b3.jpg \"node_crypto\")](https://hptechblogs.com/blog/7)\r\nPassword hashing is an important part of data integrity and security when storing sensitive data in the database. One should simply should not store raw passwords in the database. There are many libraries for password hashing like bcrypt, pbkdf2 and argon2. In this blog post we are going to implement password hashing using the default encryption library which come along with node.js this is crypto','[![node_crypto](https://hptechblogs.com/static/uploads/cda08c18977e9fc16b2c6055835891b3.jpg \"node_crypto\")](https://hptechblogs.com/blog/7)\r\nPassword hashing is an important part of data integrity and security when storing sensitive data in the database. One should simply should not store raw passwords in the database. There are many libraries for password hashing like bcrypt, pbkdf2 and argon2. In this blog post we are going to implement password hashing using the default encryption library which come along with node.js this is crypto. We are going to use [Password Based Key Derivative Function 2](https://en.wikipedia.org/wiki/PBKDF2) (pbkdf2) as the algorithm to hash our password. This function is provided by the crypto library.\r\n\r\n<hr>\r\n\r\n## What is Password Hashing\r\nBefore writing some code I\'d like to talk briefly about password hashing._A hash function is any function that can be used to map data of arbitrary size to data of fixed size_(Taken from Wikipedia). That means hash is a secure representation of a string. It is a one way function. One cant simply get the original string back from the hash string. The string resolve to the same hash if passed through the same hash function each time even infinity times. But this caused a caveat though. To breach hash hackers may use a [rainbow table](https://en.wikipedia.org/wiki/Rainbow_table). Rainbow tables contains hashes of commonly string say string 123456789. So to overcome this problem we add a _salt_ which can be a random string in the original string. Like we may add 5d6sde to 123465789 it becomes 5d6sde123456789 before hashing. So it is certainly impossible any rainbow table in world will contain hash for this string. To be even more secure certain password hashing functions provide way to hash the generated hash a certain number of iteration. So this way the hash will be impossibe to decrypt.\r\n\r\n<hr>\r\n\r\n## Lets Code a Hashing system using crypto library\r\n\r\n<script src=\"https://embed.runkit.com\" data-element-id=\"code\"></script>\r\n\r\n<div id=\"code\">\r\nconst crypto = require(\'crypto\');\r\n// Create password hash using Password based key derivative function 2\r\nfunction hashPassword(password) {\r\n    const salt = crypto.randomBytes(16).toString(\'hex\');\r\n    const hash = crypto.pbkdf2Sync(password, salt, 2048, 32, \'sha512\').toString(\'hex\');\r\n    return [salt, hash].join(\'$\');\r\n}\r\n\r\n// Checking the password hash\r\nfunction verifyHash(password, original) {\r\n    const originalHash = original.split(\'$\')[1];\r\n    const salt = original.split(\'$\')[0];\r\n\r\n    const hash = crypto.pbkdf2Sync(password, salt, 2048, 32, \'sha512\').toString(\'hex\');\r\n\r\n    if (hash === originalHash)\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\n\r\nlet hash = hashPassword(\'test\');\r\nconsole.log(\'HASH = \'+hash);\r\nconsole.log(verifyHash(\'test\',hash));\r\nconsole.log(verifyHash(\'test1\',hash));\r\n</div>\r\n','2017-05-03 08:04:42','2017-05-03 11:46:26'),(8,'Easy and Quick Deployments with now','[![Now](https://cdn.zeit.co/logos/black-bg-logo-1200.png \"Now\")](https://hptechblogs.com/blog/8)\r\nDeployment is a pain in the butt for small testing projects to setup a cloud VM in AWS or DigitalOcean. But recently I found this awesome deployment service from zeit, the creator of next js framework for which I will write a post later. It is called now. ','[![Now](https://cdn.zeit.co/logos/black-bg-logo-1200.png \"Now\")](https://hptechblogs.com/blog/8)\r\nDeployment is a pain in the butt for small testing projects to setup a cloud VM in AWS or DigitalOcean. But recently I found this awesome deployment service from zeit, the creator of next js framework for which I will write a post later. It is called now. It is really a single command login. They also provide unlimited deployment, yeah really unlimited deployment. They also provide free global DNS. But code go open source in free plan though and you have 1 GB of bandwidth every month. But it is the most awesome free plan that I can find in the entire deployment services. It supports node js, static site and docker deployment.Lets see how it works.  _GIF taken from ZEIT site._\r\n\r\n<hr>\r\n\r\n![Now_example](https://hptechblogs.com/static/uploads/2674118914543364345a1efea35608aa.gif \"now_example\")\r\n\r\n<hr>\r\n\r\nSaw its magic. Only one `now` command. It gives you a unique url every single time. Great thing is that your previous deployments does not omit. ZEIT call it immutable deployment. \r\n\r\n<hr>\r\n\r\n### Head [here](http://zeit.co/now) to know more and check it out. ','2017-05-02 13:25:07','2017-05-03 11:45:29'),(9,'Using JSON Web Token for Authentication','[![jwt](https://camo.githubusercontent.com/b021c593c8293c49475be504dc78020ba1a4abd2/68747470733a2f2f63646e2e61757468302e636f6d2f626c6f672f6a7774632f6a77745f30352e6a7067 \"jwt\")](/blog/9)\r\n[JSON Web Tokens](http://jwt.io) are replacing cookies for authentication purposes pretty significantly. In this blog post I am going to show you how you can implement JWT in your api. I am going node express in this example.','[![jwt](https://camo.githubusercontent.com/b021c593c8293c49475be504dc78020ba1a4abd2/68747470733a2f2f63646e2e61757468302e636f6d2f626c6f672f6a7774632f6a77745f30352e6a7067 \"jwt\")](/blog/9)\r\n[JSON Web Tokens](http://jwt.io) are replacing cookies for authentication purposes pretty significantly. In this blog post I am going to show you how you can implement JWT in your api. I am going node express in this example.\r\n\r\n<hr>\r\n\r\n## What is a JSON Web token\r\nFormal is definition in official site. _JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties._ So:-\r\n1. JWT is based on [RFC 7519](https://tools.ietf.org/html/rfc7519) Industry standard.\r\n2. Used to securely communicate JSON objects.\r\n3. They are self contained mean they all information use to decrypt the token is in the token itself except the secret obviously. \r\n4. JWT consists of a header, payload and signature. These three parts are connect by **_._**\r\n\r\n<hr>\r\n\r\n## A JWT looks like this \r\n```\r\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNDkyNjg1MDUwLCJleHAiOjE0OTUyNzcwNTB9.bHMstzcHfZQBND3QrugO4v3kTa7Zy7yifuuhWJbwhI0\r\n```\r\nYou may see here three parts separated by _**.**_ The information we wanna store sits in the second part. \r\n\r\n<hr>\r\n\r\n## Lets Code a Login API using JWT\r\n<script src=\"https://gist.github.com/pantharshit00/444626d3f627e1cfcc1691d90c5bcc67.js\"></script>\r\n\r\n<hr>\r\n\r\n## Result(Using postman to test APIs)\r\n\r\n<hr>\r\n\r\n### Trying to access protected api without authorization token\r\nGot unauthorized error\r\n![ss1](https://hptechblogs.com/static/uploads/dca4db87cdbd634ee7ffdac6b3bae76b.jpg \"\")\r\n\r\n<hr>\r\n\r\n### Logging in with right credentials\r\nGot the token back in the response\r\n![ss2](https://hptechblogs.com/static/uploads/9d9455fb1bb9947e780be9640f6d320a.jpg \"\")\r\n\r\n<hr>\r\n\r\n### Accessing protected route with authorization token\r\nSuccessfully entered the api\r\n![ss3](https://hptechblogs.com/static/uploads/f99365a296a3435e358fd35c2cadb252.jpg \"\")','2017-04-20 05:32:14','2017-04-21 06:11:11'),(10,'Using ESLint in Visual Studio Code (vscode)','[![lintncode](https://hptechblogs.com/static/uploads/f590050bbc2c4fe4d26e7d02dfa48666.jpg \"\")](http://hptechblogs.com/blog/10)\r\nInconsistency in programming can lead to many serious trouble when the size of our project grows. To counter this many linter are out there like eslint, jshint, jslint etc. ','[![lintncode](https://hptechblogs.com/static/uploads/f590050bbc2c4fe4d26e7d02dfa48666.jpg \"\")](http://hptechblogs.com/blog/10)\r\nInconsistency in programming can lead to many serious trouble when the size of our project grows. To counter this many linter are out there like eslint, jshint, jslint etc. (I am talking about javascript). They help you to be consistent in your semicolons, quotes etc. all that good stuff. In this blog post I am going to show you how you can setup ESLint for visual studio code which is a very nice text editor I think better than sublime text.\r\n\r\n<hr>\r\n\r\n## Install ESLint globally\r\nIt is simple as usual. Install it globally by using NPM by this command:\r\n```\r\nnpm install -g eslint\r\n```\r\n\r\n<hr>\r\n\r\n## Download ESLint extension for VSCode\r\nFollow the method shown in the gif\r\n![down_ext](https://hptechblogs.com/static/uploads/99add48da3077d681f1de9a0685ee0b2.gif \"\")\r\n\r\n<hr>\r\n\r\n## Initialize ESLint in your project\r\nFollow this GIF than restart VSCode(**Tip:-** Use _Ctrl + `_ to open terminal in VSCode)\r\n![ins_eslint](https://hptechblogs.com/static/uploads/3eff01cda9df7245a12ce7a1d7c4cfe8.gif \"\")\r\n\r\n<hr>\r\n\r\n## See ESLint in action\r\n![see_eslint](https://hptechblogs.com/static/uploads/184eb5e4f9eb5a99338390ebe0e033f3.gif \"\")\r\n\r\n<hr>\r\n\r\n### See [ESLint](http://eslint.org) site for more options to play with.','2017-04-24 11:48:16','2017-04-24 11:59:49');
/*!40000 ALTER TABLE `blogs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `images`
--

DROP TABLE IF EXISTS `images`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `images` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `imageName` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `images`
--

LOCK TABLES `images` WRITE;
/*!40000 ALTER TABLE `images` DISABLE KEYS */;
INSERT INTO `images` VALUES (1,'95ae3225bf31ad7cf496acd7640d63e6.jpg'),(3,'a73a72e2e2fc71f8fd7d766e251fc91a.png'),(4,'42cb1e47b8ff7b4b2102906147e7c1af.JPG'),(6,'bbae82e9737cd65880d66c1c5d3c7ae1.jpg'),(7,'55184fcdcad0f7567ddbd14cdc891faf.jpg'),(8,'40f0abbfe8fe5a4cd59a49475a5e77ae.jpg'),(9,'288fd8aa8ab0cd44a45d5a89557862d8.jpg'),(10,'78f5f02da3f390a0470df343b5341d1a.jpg'),(11,'608d346a974c668fda04a5a9ce321af7.png'),(12,'dca4db87cdbd634ee7ffdac6b3bae76b.jpg'),(13,'9d9455fb1bb9947e780be9640f6d320a.jpg'),(14,'f99365a296a3435e358fd35c2cadb252.jpg'),(15,'99add48da3077d681f1de9a0685ee0b2.gif'),(16,'3eff01cda9df7245a12ce7a1d7c4cfe8.gif'),(17,'184eb5e4f9eb5a99338390ebe0e033f3.gif'),(18,'f590050bbc2c4fe4d26e7d02dfa48666.jpg'),(19,'2674118914543364345a1efea35608aa.gif'),(20,'cda08c18977e9fc16b2c6055835891b3.jpg');
/*!40000 ALTER TABLE `images` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-06-02 12:44:53
